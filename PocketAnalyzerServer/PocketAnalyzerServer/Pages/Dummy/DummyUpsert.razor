@page "/dummy/create"
@page "/dummy/edit/{Id:int}"

@using Business.Repository
@using DataAccess.Models
@using PocketAnalyzerServer.Services

@inject IDummyRepository DummyRepository
@inject NavigationManager NavigationManager
@inject IImageUploadService ImageUploadService
@inject IDummyImageRepository DummyImageRepository
@inject IJSRuntime JSRuntime

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@action Dummy</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="dummy" OnValidSubmit="HandleDummyUpsert">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="dummy.Name" class="form-control" placeholder="Enter Name"></InputText>
                        <ValidationMessage For="() => dummy.Name"></ValidationMessage>
                    </div> <br />
                    <div class="form-group">
                        <label>Value</label>
                        <InputText @bind-Value="dummy.Value" class="form-control" placeholder="Enter Value"></InputText>
                        <ValidationMessage For="() => dummy.Value"></ValidationMessage>
                    </div> <br />
                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple> Upload Images</InputFile>
                        <div class="row">
                            @if (uploadedImages.Any())
                            {
                                <h2>Currently uploaded images</h2>
                                foreach (var image in uploadedImages)
                                {
                                    <div class="col-md-2 mt-3">
                                        <img src="@image" asp-append-version="true" width="100px" />
                                        <input @onclick="() => DeleteFromUploaded(image)" type="button" class="btn-danger btn-block mt-4" value="Delete" size="4"/>
                                    </div>                    
                                }
                            }
                        </div>
                        <br /><br />
                        <div class="row">
                            @if (Id is not null && currentImages.Any())
                            {
                                <h2>Dummy Images</h2>
                                foreach (var image in dummy.DummyImages)
                                {
                                    <div class="col-md-2 mt-3">
                                        <img src="@image.ImageUrl" asp-append-version="true" width="100px" />
                                        <input @onclick="() => DeleteForDummy(image)" type="button" class="btn-danger btn-block mt-4" value="Delete" size="4"/>
                                    </div>                    
                                }
                            }
                       </div>
                    </div> <br />
                    <div class="form-group">
                        <button class="btn-success">@action</button> <br /> <br />
                        <NavLink href="dummy" class="btnalert-primary">Back to main page</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private Dummy dummy { get; set; } = new();
    private string action { get; set; } = "Create";
    private List<string> uploadedImages { get; set; } = new List<string>();
    private List<DummyImage> currentImages { get; set; } = new List<DummyImage>();
    private List<DummyImage> currentToBeDeleted { get; set; } = new List<DummyImage>();

    private async Task HandleDummyUpsert()
    {
        if (action.Equals("Create"))
        {
            var dummyId = (await DummyRepository.CreateDummyAsync(dummy)).Id;
            await AddImages(uploadedImages, dummyId);
            await JSRuntime.ToastrSuccess("Dummy created successfuly");
        }
        else
        {    
            await DummyRepository.UpdateDummyAsync(Id.Value, dummy);
            await AddImages(uploadedImages, Id.Value);
            currentToBeDeleted.ForEach(async image =>
            {
                await DummyImageRepository.DeleteDummyImage(image.Id);
                ImageUploadService.DeleteImage(image.ImageUrl);
            });
            await JSRuntime.ToastrSuccess("Dummy updated successfuly");
        }

        NavigationManager.NavigateTo("dummy");
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            action = "Update";
            dummy = await DummyRepository.GetDummyAsync(Id.Value);
            currentImages = dummy.DummyImages.ToList();
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs eventArgs)
    {
        try
        {
            var acceptedExtensions = new List<string>
            {
                ".jpg",
                ".png",
                ".jpeg"
            };
            uploadedImages = new List<string>();
            if (eventArgs.FileCount > 0)
            {
                foreach (var uploadedImage in eventArgs.GetMultipleFiles())
                {
                    var fileInfo = new FileInfo(uploadedImage.Name);
                    if (acceptedExtensions.Contains(fileInfo.Extension.ToLower()))
                    {
                        var uploadedImagePath = await ImageUploadService.UploadImage(uploadedImage);
                        uploadedImages.Add(uploadedImagePath);
                    }
                }

                if (!uploadedImages.Any())
                {
                    await JSRuntime.ToastrError($"Please select one of these formats : {string.Concat(acceptedExtensions.Select(x => " " + x + " "))}");
                }
            }
        }
        catch
        {
            throw;
        }
    }

    private async Task AddImages(IEnumerable<string> images, int dummyId)
    {
        foreach (var image in images)
        {
            await DummyImageRepository.CreateDummyImage(new()
                {
                    ImageUrl = image,
                    DummyId = dummyId
                });
        }
    }

    private async void DeleteFromUploaded(string imageUrl)
    {
        uploadedImages.Remove(imageUrl);
        ImageUploadService.DeleteImage(imageUrl);
    }

    private async Task DeleteForDummy(DummyImage image)
    {
        currentToBeDeleted.Add(image);
        currentImages.Remove(image);
    }
}
